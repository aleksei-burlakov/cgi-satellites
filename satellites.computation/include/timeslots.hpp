#pragma once
#include "misc.hpp"
#include <list>
#include <map>

namespace ts
{
  typedef std::multimap<ns_time::Time, int> TimeMap;

  /* PackTimestamps puts all timestamps on a single time axis.
  * It also takes care if more than one even occures at the same time stamp.
  * Input: timeSlots
  * Output: timeMap stores how many satilites appears/disappear at a timeStamp */
  void PackTimestamps( TimeMap& timeMap, const ns_time::TimeSlots& timeSlots );
  
  /* ComputeMaximumAvailableSatellites does:
  *   1) integrates timeMap generated by PackTimestamps
  *     as the result timeMap has an actual number of satellites above the horizont.
  *   2) computes the maximum number of satellites above the horizont.
  * In-Out: timeMap.
  *   second parameter (flags 1 and -1) is modified. It gets the number of sattelites at timeStamp.
  * Out: maxSatellites is the maximum number of satelites above the horizont */
  void ComputeMaximumAvailableSatellites( unsigned& maxSatellites, TimeMap& timeMap );
  
  /* Input: timeSlots parsed from a file
   * Output: 1) maxSatellites - the maximum number of satellites visible
   *         2) timeSlotsWithMostSatellites - slots when it happens */
  void ComputeTimeslotsWithMostSatellites(
    ns_time::TimeSlots& timeSlotsWithMostSatellites
    , unsigned& maxSatellites
    , const ns_time::TimeSlots& timeSlots );
}